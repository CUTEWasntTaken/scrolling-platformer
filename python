import pygame
pygame.init()
screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption('Side-Scrolling Game')
clock = pygame.time.Clock() 

player = [100, 450, 0, 0] #xpos, ypos, xvel, yvel
isOnGround = False
offset = 0
platforms = [(500, 400), (700, 300)]
platforms2 = [(300, 300), (900, 300)]



def move_player():
    global isOnGround
    global offset
    if keys[pygame.K_LEFT]:
        if offset > 260 and player[0]>0: #check if youve reached the left edge of the map
            player[2] = -5 #let player approach side of game screen
            
        elif player[0]>400 and offset < -1500: #check if were on the far right edge of the map
            player[2] = -5 #let player get back to the center of the game screen
            
        elif player[0]>0: #if player is recentered, move the *offset*, not the player
            offset += 5
            player[2] = 0
            
        else:
            player[2]=0 #make sure motion is off (stops from going off edge)
       
        
    elif keys[pygame.K_RIGHT]:
        if offset < -1500 and player[0]<750:
            player[2] = 5
            
        elif offset >260 and player[0]<400:
            player[2] = 5
            
        elif player[0]<750:
            offset -= 5
            player[2] = 0
            
        else:
            player[2]=0
            
#platform collision
    for i in range(len(platforms)):
        if player[0]+50>platforms[i][0]+offset and player[0]<platforms[i][0]+100+offset and player[1]+50>platforms[i][1] and player[1]+50< platforms[i][1]+50:
            isOnGround = True #stop gravity
            player[1]=platforms[i][1]-50 #reset players feet
            player[3] = 0 #stop downward velocity
            #print("on platform") #for testing
 
    for i in range(len(platforms2)):
        if player[0]+50>platforms2[i][0]+offset and player[0]<platforms2[i][0]+100+offset and player[1]+50>platforms2[i][1] and player[1]+50< platforms2[i][1]+50:
            isOnGround = True #stop gravity
            player[1]=platforms2[i][1]-50 #reset players feet
            player[3] = 0 #stop downward velocity
            #print("on platform") #for testing
 
    if isOnGround == False:
        player[3] += 1 #gravity
        
# Jump mechanics
    if isOnGround == True and keys[pygame.K_UP]:
        player[3] = -15 # Player jumps
        isOnGround = False
        
    player[0]+=player[2] #add x velocity to x position
    player[1]+=player[3] #add y velocity to y position

    if player[1] > 450:
        isOnGround = True
        player[1] = 450
        
def draw_clouds():
    # Draw clouds in the background
    for x in range(100, 800, 300): #this loop controls WHERE and HOW MANY clouds are drawn
        for i in range(3): #draw 3 circles
            pygame.draw.circle(screen, (255, 255, 255), (x + offset, 100), 40)
            pygame.draw.circle(screen, (255, 255, 255), (x - 50 + offset, 125), 40)
            pygame.draw.circle(screen, (255, 255, 255), (x + 50 + offset, 125), 40)
        pygame.draw.rect(screen, (255, 255, 255), (x - 50 + offset, 100, 100, 65)) # flatten bottom edge
        
def draw_trees():   
    for x in range(100, 800, 300):
        for i in range(3):
            pygame.draw.rect(screen, (64, 54, 8), (x-10 + offset, 375, 25, 200))
            pygame.draw.circle(screen, (0, 150, 0), (x + offset, 320),40)
            pygame.draw.circle(screen, (0, 150, 0), (x - 30 + offset, 350), 40)
            pygame.draw.circle(screen, (0, 150, 0), (x + 30 + offset, 350), 40)
            
def draw_platforms():
    for i in range(len(platforms)):
        pygame.draw.rect(screen, (150, 10, 10), (platforms[i][0] + offset, platforms[i][1], 100, 30))

def draw_platforms2():
    for i in range(len(platforms2)):
        pygame.draw.rect(screen, (150, 10, 10), (platforms2[i][0] + offset, platforms2[i][1], 100, 30))


running = True
while running: # Main game loop------------------------------
    clock.tick(60) 
    #input section--------------------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    keys = pygame.key.get_pressed()
    #physics section----------------------------------------------
    move_player()
    # Render section -----------------------------------------------
    
                                   
    screen.fill((135, 206, 235)) # Sky blue background
    draw_clouds() #fuction calls
    draw_trees()
    draw_platforms()
    draw_platforms2()
    pygame.draw.rect(screen, (255, 0, 255), (player[0], player[1], 50, 50)) #player
    pygame.draw.rect(screen, (0, 140, 5), (0, 500, 1000, 1000))   
    pygame.display.flip()
    

    
pygame.quit()
